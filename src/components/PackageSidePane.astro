---
import { SemVer } from "semver";
import type { LicenseListItem } from "~/utils/license";
import { findLatestPackage, getAllPackages, getDeprecatorPackages, getPackages, idToFileName, type VPMPackage, type VPMRepository } from "~/utils/vpm";

interface Props {
  pkg: VPMPackage;
  license: LicenseListItem | undefined;
}

const {pkg, license} = Astro.props;

const allRepos: VPMRepository[] = await Astro.glob("~/../vpm/repos/*.json");
const pkgs = getAllPackages(allRepos);

const repositories = allRepos.map((repo) => {
  return {
    repository: repo,
    count: getPackages(repo.packages[pkg.name] ?? {versions: {}}).length,
  }
}).filter((repo) => repo.count > 0);
repositories.sort((a, b) => {
  if (a.count === b.count) {
    return a.repository.name.localeCompare(b.repository.name);
  }
  return b.count - a.count;
}).reverse();

const dependencies = Object.entries(pkg.dependencies ?? {}).
  map(([name, version]) => {
    const semver = new SemVer(version.match(/\d+\.\d+\.\d+/)?.[0] ?? "0.0.0");
    return {
      name: name,
      version: version,
      url: name.startsWith("com.unity.")
        ? `https://docs.unity3d.com/Packages/${name}@${semver.major}.${semver.minor}/`
        : `https://openupm.com/packages/${name}/`,
    };
  })
  .sort((a, b) => a.name.localeCompare(b.name));

const vpmDependencies = Object.keys(pkg.vpmDependencies ?? []).
  map((dep) => {
    const deps = pkgs.filter((p) => p.name === dep)
    return findLatestPackage(deps);
  })
  .filter((p): p is VPMPackage => p !== undefined)
  .sort((a, b) => a.displayName.localeCompare(b.displayName));

const legacyPackages = pkg.legacyPackages ?
  pkg.legacyPackages.map((dep) => {
    const deps = pkgs.filter((p) => p.name === dep)
    return findLatestPackage(deps);
  })
  .filter((p): p is VPMPackage => p !== undefined)
  .sort((a, b) => a.displayName.localeCompare(b.displayName))
: [];

const licenseLabel = pkg.license ?? (pkg.licensesUrl ? "View license" : "Undefined");
const licensesUrl = pkg.licensesUrl ?? license?.reference;

const deprecators = getDeprecatorPackages(pkg, allRepos);
const showNotes = deprecators.length > 0;

---
<style>
  h2 + * {
    @apply mt-2;
  }

  h2 {
    @apply text-2xl font-bold mt-6;
  }

  h2:first-of-type {
    @apply mt-0;
  }

  p + ul {
    @apply mt-2;
  }

  li {
    @apply mb-2;
  }

  a {
    @apply link link-primary;
  }

  .divider + * {
    @apply mt-0;
  }
</style>

<h2>Package Name</h2>
<p>{pkg.name}</p>

<h2>Documentation</h2>
<p>
  {
    pkg.documentationUrl
    ? <a target="_blank" href={pkg.documentationUrl}>View documentation</a>
    : "No documentation URL"
  }
</p>

<h2>Repositories</h2>
<ul>
  {
    repositories.map((repo) => (
      <li>
        <a href={`/repositories/${idToFileName(repo.repository.id)}`}>{repo.repository.name}</a>
        ({repo.count}&nbsp;{repo.count > 1 ? 'versions' : 'version'})
      </li>
    ))
  }
</ul>

<h2>Version</h2>
<p>
  {pkg.version}
  {
    pkg.changelogUrl
    ? <span>(<a target="_blank" href={pkg.changelogUrl}>Changelog</a>)</span>
    : null
  }
</p>
</div>

<h2>Unity version</h2>
{
  pkg.unity
  ? <p>{pkg.unity} or later</p>
  : <p>Any</p>
}

<h2>Dependencies</h2>
{
  dependencies.length > 0
  ? <ul>
    {
      dependencies.map((dep) => (
        <li><a href={dep.url} target="_blank">{dep.name}</a></li>
      ))
    }
  </ul>
  : <p>No dependencies</p>
}

<h2>VPM Dependencies</h2>
{
  vpmDependencies.length > 0
  ? <ul>
    {
      vpmDependencies.map((dep) => (
        <li><a href={`/packages/${dep.name}`}>{dep.displayName}</a></li>
      ))
    }
  </ul>
  : <p>No dependencies</p>
}

<h2>Legacy Packages</h2>
{
  legacyPackages.length > 0
  ? <ul>
    {
      legacyPackages.map((legacy) => (
        <li><a href={`/packages/${legacy.name}`}>{legacy.displayName}</a></li>
      ))
    }
  </ul>
  : <p>No legacy packages</p>
}

<h2>License</h2>
<p>
  {
    licensesUrl
    ? <a target="_blank" href={licensesUrl}>{licenseLabel}</a>
    : licenseLabel
  }
</p>

<h2>Author</h2>
<p>
{
  pkg.author
  ?
    pkg.author.name
  : "Undefined"
}

{
  showNotes
    ?
      <div class="divider"></div>
      <h2>Notes</h2>
    : null
}
{
  deprecators.length > 0
  ? <p>This package is removed when using following packages.</p>
    <ul>
      {
        deprecators.map((dep) => (
          <li><a href={`/packages/${dep.name}`}>{dep.displayName}</a></li>
        ))
      }
    </ul>
  : null
}
