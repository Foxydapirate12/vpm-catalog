---
import type { LicenseListItem } from "~/utils/license";
import { findLatestPackage, getAllPackages, getPackages, urlToFileName, type VPMPackage, type VPMRepository } from "~/utils/vpm";

interface Props {
  pkg: VPMPackage;
  license: LicenseListItem | undefined;
}

const {pkg, license} = Astro.props;

const allRepos: VPMRepository[] = await Astro.glob("~/../vpm/repos/*.json");
const pkgs = getAllPackages(allRepos);

const repositories = allRepos.map((repo) => {
  return {
    repository: repo,
    count: getPackages(repo.packages[pkg.name] ?? {versions: {}}).length,
  }
}).filter((repo) => repo.count > 0);
repositories.sort((a, b) => {
  if (a.count === b.count) {
    return a.repository.name.localeCompare(b.repository.name);
  }
  return b.count - a.count;
}).reverse();

const vpmDependencies = Object.keys(pkg.vpmDependencies ?? []).
  map((dep) => {
    const deps = pkgs.filter((p) => p.name === dep)
    return findLatestPackage(deps);
  })
  .filter((p): p is VPMPackage => p !== undefined)
  .sort((a, b) => a.displayName.localeCompare(b.displayName));

const legacyPackages = pkg.legacyPackages ?
  pkg.legacyPackages.map((dep) => {
    const deps = pkgs.filter((p) => p.name === dep)
    return findLatestPackage(deps);
  })
  .filter((p): p is VPMPackage => p !== undefined)
  .sort((a, b) => a.displayName.localeCompare(b.displayName))
: [];

const licenseLabel = pkg.license ?? (pkg.licensesUrl ? "View license" : "Undefined");
const licensesUrl = pkg.licensesUrl ?? license?.reference;
---
<style>
  h2 {
    margin-bottom: 0.5rem;
  }

  h2 + * {
    margin-bottom: 1.5rem;
  }

  li {
    margin-bottom: 0.5rem;
  }
</style>

<h2 class="text-2xl font-bold">Documentation</h2>
<p>
  {
    pkg.documentationUrl
    ? <a class="link link-primary" target="_blank" href={pkg.documentationUrl}>View documentation</a>
    : "No documentation URL"
  }
</p>

<h2 class="text-2xl font-bold">Repositories</h2>
<ul>
  {
    repositories.map((repo) => (
      <li>
        <a class="link link-primary" href={`/repositories/${urlToFileName(repo.repository.id)}`}>{repo.repository.name}</a>
        ({repo.count}&nbsp;{repo.count > 1 ? 'versions' : 'version'})
      </li>
    ))
  }
</ul>

<h2 class="text-2xl font-bold">Version</h2>
<p>
  {pkg.version}
  {
    pkg.changelogUrl
    ? <span>(<a class="link link-primary" target="_blank" href={pkg.changelogUrl}>Changelog</a>)</span>
    : null
  }
</p>
</div>

<h2 class="text-2xl font-bold">Unity version</h2>
{
  pkg.unity
  ? <p>{pkg.unity} or later</p>
  : <p>Any</p>
}

<h2 class="text-2xl font-bold">Dependencies</h2>
{
  pkg.dependencies
  ? <ul>
    {
      Object.keys(pkg.dependencies).sort().map((dep) => (
        <li><a class="link link-primary" href={`https://openupm.com/packages/${dep}/`} target="_blank">{dep}</a></li>
      ))
    }
  </ul>
  : <p>No dependencies</p>
}

<h2 class="text-2xl font-bold">VPM Dependencies</h2>
{
  vpmDependencies.length > 0
  ? <ul>
    {
      vpmDependencies.map((dep) => (
        <li><a class="link link-primary" href={`/packages/${dep.name}`}>{dep.displayName}</a></li>
      ))
    }
  </ul>
  : <p>No dependencies</p>
}

<h2 class="text-2xl font-bold">Legacy Packages</h2>
{
  legacyPackages.length > 0
  ? <ul>
    {
      legacyPackages.map((legacy) => (
        <li><a class="link link-primary" href={`/packages/${legacy.name}`}>{legacy.displayName}</a></li>
      ))
    }
  </ul>
  : <p>No legacy packages</p>
}

<h2 class="text-2xl font-bold">License</h2>
<p>
  {
    licensesUrl
    ? <a class="link link-primary" target="_blank" href={licensesUrl}>{licenseLabel}</a>
    : licenseLabel
  }
</p>

<h2 class="text-2xl font-bold">Author</h2>
<p>
{
  pkg.author
  ?
    pkg.author.name
  : "Undefined"
}
</p>
