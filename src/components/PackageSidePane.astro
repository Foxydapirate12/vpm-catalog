---
import { getRelativeLocaleUrl } from "astro:i18n";
import { SemVer } from "semver";
import type { Language } from "~/i18n/ui";
import { useTranslations } from "~/i18n/utils";
import type { LicenseListItem } from "~/utils/license";
import { findLatestPackage, getAllPackages, getDeprecatorPackages, getPackages, idToFileName, type VPMPackage, type VPMRepository } from "~/utils/vpm";

interface Props {
  pkg: VPMPackage;
  license: LicenseListItem | undefined;
}

const {pkg, license} = Astro.props;
const currentLocale = Astro.currentLocale as Language;
const t = useTranslations(currentLocale);

const allRepos: VPMRepository[] = await Astro.glob("~/../vpm/repos/*.json");
const pkgs = getAllPackages(allRepos);

const authorLabel =  pkg.author ? pkg.author.name : t('component.package-side-pane.undefined');

const repositories = allRepos.map((repo) => {
  return {
    repository: repo,
    count: getPackages(repo.packages[pkg.name] ?? {versions: {}}).length,
  }
}).filter((repo) => repo.count > 0);
repositories.sort((a, b) => {
  if (a.count === b.count) {
    return a.repository.name.localeCompare(b.repository.name);
  }
  return b.count - a.count;
}).reverse();

const dependencies = Object.entries(pkg.dependencies ?? {}).
  map(([name, version]) => {
    const semver = new SemVer(version.match(/\d+\.\d+\.\d+/)?.[0] ?? "0.0.0");
    return {
      name: name,
      version: version,
      url: name.startsWith("com.unity.")
        ? `https://docs.unity3d.com/Packages/${name}@${semver.major}.${semver.minor}/`
        : `https://openupm.com/packages/${name}/`,
    };
  })
  .sort((a, b) => a.name.localeCompare(b.name));

const vpmDependencies = Object.keys(pkg.vpmDependencies ?? []).
  map((dep) => {
    const deps = pkgs.filter((p) => p.name === dep)
    return findLatestPackage(deps);
  })
  .filter((p): p is VPMPackage => p !== undefined)
  .sort((a, b) => a.displayName.localeCompare(b.displayName));

const legacyPackages = pkg.legacyPackages ?
  pkg.legacyPackages.map((dep) => {
    const deps = pkgs.filter((p) => p.name === dep)
    return findLatestPackage(deps);
  })
  .filter((p): p is VPMPackage => p !== undefined)
  .sort((a, b) => a.displayName.localeCompare(b.displayName))
: [];
const missingLegacyPackages = pkg.legacyPackages ?
  pkg.legacyPackages.filter((dep) => !pkgs.find((p) => p.name === dep))
: [];

const licenseLabel = pkg.license ?? pkg.licensesUrl ?? t('component.package-side-pane.undefined');
const licensesUrl = pkg.licensesUrl ?? license?.reference;

const deprecators = getDeprecatorPackages(pkg, allRepos);
const showNotes = deprecators.length > 0;

---
<style>
  h2 + * {
    @apply mt-2;
  }

  h2 {
    @apply text-2xl font-bold mt-6;
  }

  h2:first-of-type {
    @apply mt-0;
  }

  p + ul {
    @apply mt-2;
  }

  li {
    @apply mb-2;
  }

  a {
    @apply link link-primary link-hover;
  }

  .divider + * {
    @apply mt-0;
  }
</style>

<h2 id="vpm-catalog-package-name" data-pagefind-body>{t('component.package-side-pane.package-name')}</h2>
<p data-pagefind-body>{pkg.name}</p>

<h2 id="vpm-catalog-package-documentation">{t('component.package-side-pane.documentation')}</h2>
<p>
  {
    pkg.documentationUrl
    ? <a target="_blank" href={pkg.documentationUrl}>{pkg.documentationUrl}</a>
    : t('component.package-side-pane.undefined')
  }
</p>

<h2 id="vpm-catalog-package-repositories">{t('component.package-side-pane.repositories')}</h2>
<ul>
  {
    repositories.map((repo) => (
      <li>
        <a href={getRelativeLocaleUrl(currentLocale, `repositories/${idToFileName(repo.repository.id ?? repo.repository.url)}`)}>{repo.repository.name}</a>
        ({repo.count}&nbsp;{repo.count > 1 ? t('component.package-side-pane.version-unit-multiple') : t('component.package-side-pane.version-unit-single')})
      </li>
    ))
  }
</ul>

<h2 id="vpm-catalog-package-version">{t('component.package-side-pane.version')}</h2>
<p>
  {pkg.version}
  {
    pkg.changelogUrl
    ? <span>(<a target="_blank" href={pkg.changelogUrl}>{t('component.package-side-pane.changelog')}</a>)</span>
    : null
  }
</p>
</div>

<h2 id="vpm-catalog-package-unity-version">{t('component.package-side-pane.unity-version')}</h2>
{
  pkg.unity
  ? <p>{pkg.unity}{pkg.unityRelease ? `.${pkg.unityRelease}` : ''} {t('component.package-side-pane.or-later')}</p>
  : <p>{t('component.package-side-pane.undefined')}</p>
}

<h2 id="vpm-catalog-package-dependencies">{t('component.package-side-pane.dependencies')}</h2>
{
  dependencies.length > 0
  ? <ul>
    {
      dependencies.map((dep) => (
        <li><a href={dep.url} target="_blank">{dep.name}</a></li>
      ))
    }
  </ul>
  : <p>{t('component.package-side-pane.no-dependencies')}</p>
}

<h2 id="vpm-catalog-package-vpm-dependencies">{t('component.package-side-pane.vpm-dependencies')}</h2>
{
  vpmDependencies.length > 0
  ? <ul>
    {
      vpmDependencies.map((dep) => (
        <li><a href={getRelativeLocaleUrl(currentLocale, `packages/${dep.name}`)}>{dep.displayName}</a></li>
      ))
    }
  </ul>
  : <p>{t('component.package-side-pane.no-dependencies')}</p>
}

<h2 id="vpm-catalog-package-legacy-packages" data-pagefind-body>{t('component.package-side-pane.legacy-packages')}</h2>
{
  legacyPackages.length > 0 || missingLegacyPackages.length > 0
  ? <ul data-pagefind-body>
    {
      legacyPackages.map((legacy) => (
        <li>
          <a href={`/packages/${legacy.name}`}>{legacy.displayName}</a>
          <span class="hidden" aria-hidden="true">{legacy.name}</span>
        </li>
      ))
    }
    {
      missingLegacyPackages.map((legacy) => (
        <li>{legacy}</li>
      ))
    }
  </ul>
  : <p>{t('component.package-side-pane.no-legacy-packages')}</p>
}

<h2 id="vpm-catalog-package-license" data-pagefind-body>{t('component.package-side-pane.license')}</h2>
<p data-pagefind-body>
  {
    licensesUrl
    ? <a target="_blank" href={licensesUrl}>{licenseLabel}</a>
    : licenseLabel
  }
</p>

<h2 id="vpm-catalog-package-author" data-pagefind-body>{t('component.package-side-pane.author')}</h2>
<p data-pagefind-body>
{
  pkg.author?.url
  ? <a target="_blank" href={pkg.author.url}>{authorLabel}</a>
  : authorLabel
}
</p>

{
  showNotes
    ?
      <div class="divider"></div>
      <h2 id="vpm-catalog-package-notes">{t('component.package-side-pane.notes')}</h2>
    : null
}
{
  deprecators.length > 0
  ? <p>{t('component.package-side-pane.notes-detail')}</p>
    <ul>
      {
        deprecators.map((dep) => (
          <li><a href={getRelativeLocaleUrl(currentLocale, `packages/${dep.name}`)}>{dep.displayName}</a></li>
        ))
      }
    </ul>
  : null
}

<div class="divider"></div>

<button class="btn btn-outline btn-block " onclick="json_dialog.showModal()">{t('button.view-packahe-json')}</button>
<dialog id="json_dialog" class="modal">
  <div class="modal-box w-11/12 max-w-screen-xl">
    <h3 class="font-bold text-lg mb-2">{t('component.package-side-pane.package-json-from-repository')}</h3>
    <pre class="bg-base-200 overflow-auto p-4">{JSON.stringify(pkg, null, 2)}</pre>
    <div class="modal-action">
      <form method="dialog">
        <button class="btn">{t('button.close')}</button>
      </form>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>{t('button.close')}</button>
  </form>
</dialog>
